# ai_service.py
# Developer: Mr @Mrnick66
# Advanced AI service with Groq integration for USTAAD-AI

import asyncio
import logging
from typing import List, Dict, Optional
from groq import Groq
from config import Config

logger = logging.getLogger(__name__)

class AIService:
    def __init__(self):
        self.client = Groq(api_key=Config.GROQ_API_KEY)
        self.conversation_history = {}
        
    async def get_ai_response(self, user_id: int, message: str, language: str = "auto") -> str:
        """Get AI response with conversation context"""
        try:
            # Check for identity questions first
            identity_response = self._check_identity_questions(message, language)
            if identity_response:
                return identity_response
            
            # Get or create conversation history
            if user_id not in self.conversation_history:
                self.conversation_history[user_id] = []
            
            # Add user message to history
            self.conversation_history[user_id].append({
                "role": "user",
                "content": message
            })
            
            # Keep only last 10 messages to manage token usage
            if len(self.conversation_history[user_id]) > 20:
                self.conversation_history[user_id] = self.conversation_history[user_id][-20:]
            
            # Create system prompt based on language
            system_prompt = self._get_system_prompt(language)
            
            # Prepare messages for API
            messages = [{"role": "system", "content": system_prompt}]
            messages.extend(self.conversation_history[user_id])
            
            # Get response from Groq
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model=Config.DEFAULT_MODEL,
                messages=messages,
                max_tokens=Config.MAX_TOKENS,
                temperature=Config.TEMPERATURE,
                stream=False
            )
            
            ai_response = response.choices[0].message.content
            
            # Add AI response to history
            self.conversation_history[user_id].append({
                "role": "assistant",
                "content": ai_response
            })
            
            return ai_response
            
        except Exception as e:
            logger.error(f"AI Service Error: {e}")
            return self._get_error_message(language)
    
    def _check_identity_questions(self, message: str, language: str) -> Optional[str]:
        """Check if user is asking about bot identity and respond accordingly"""
        message_lower = message.lower()
        
        # Name questions
        name_keywords = {
            'en': ['what is your name', 'your name', 'who are you', 'what are you called'],
            'hi': ['рддреБрдореНрд╣рд╛рд░рд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ', 'рдЖрдкрдХрд╛ рдирд╛рдо', 'рддреБрдо рдХреМрди рд╣реЛ', 'рдЖрдк рдХреМрди рд╣реИрдВ'],
            'ur': ['╪в┘╛ ┌й╪з ┘Ж╪з┘Е ┌й█М╪з █Б█Т', '╪к┘Е█Б╪з╪▒╪з ┘Ж╪з┘Е', '╪в┘╛ ┌й┘И┘Ж █Б█М┌║', '╪к┘Е ┌й┘И┘Ж █Б┘И'],
            'ar': ['┘Е╪з ╪з╪│┘Е┘Г', '╪з╪│┘Е┘Г', '┘Е┘Ж ╪г┘Ж╪к', '┘Е╪з ┘З┘И ╪з╪│┘Е┘Г']
        }
        
        # Developer questions
        developer_keywords = {
            'en': ['who made you', 'who created you', 'your developer', 'who built you', 'your creator', 'who is your boss'],
            'hi': ['рддреБрдореНрд╣реЗрдВ рдХрд┐рд╕рдиреЗ рдмрдирд╛рдпрд╛', 'рддреБрдореНрд╣рд╛рд░рд╛ рдбреЗрд╡рд▓рдкрд░', 'рддреБрдореНрд╣рд╛рд░рд╛ рдирд┐рд░реНрдорд╛рддрд╛', 'рддреБрдореНрд╣рд╛рд░рд╛ рдмреЙрд╕ рдХреМрди рд╣реИ'],
            'ur': ['╪к┘Е█Б█М┌║ ┌й╪│ ┘Ж█Т ╪и┘Ж╪з█М╪з', '╪к┘Е█Б╪з╪▒╪з ┌И█М┘И┘Д┘╛╪▒', '╪к┘Е█Б╪з╪▒╪з ╪и┘Ж╪з┘Ж█Т ┘И╪з┘Д╪з', '╪к┘Е█Б╪з╪▒╪з ╪и╪з╪│ ┌й┘И┘Ж █Б█Т'],
            'ar': ['┘Е┘Ж ╪╡┘Ж╪╣┘Г', '┘Е┘Ж ╪╖┘И╪▒┘Г', '┘Е╪╖┘И╪▒┘Г', '┘Е┘Ж ┘З┘И ╪▒╪ж┘К╪│┘Г']
        }
        
        # Check for name questions
        for lang, keywords in name_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                return self._get_name_response(language)
        
        # Check for developer questions
        for lang, keywords in developer_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                return self._get_developer_response(language)
        
        return None
    
    def _get_name_response(self, language: str) -> str:
        """Get name response in appropriate language"""
        responses = {
            'hi': f"ЁЯОп рдореЗрд░рд╛ рдирд╛рдо **{Config.BOT_NAME}** рд╣реИ! ЁЯдЦ\n\nрдореИрдВ рдПрдХ рдПрдбрд╡рд╛рдВрд╕ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдВ рдЬреЛ рдЖрдкрдХреА рд╣рд░ рдорджрдж рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИред ЁЯШКтЬи\n\n{Config.POWERED_BY} | {Config.VERSION}",
            'ur': f"ЁЯОп ┘Е█М╪▒╪з ┘Ж╪з┘Е **{Config.BOT_NAME}** █Б█Т! ЁЯдЦ\n\n┘Е█М┌║ ╪з█М┌й ╪з█М┌И┘И╪з┘Ж╪│ AI ╪з╪│╪│┘╣┘Ж┘╣ █Б┘И┌║ ╪м┘И ╪в┘╛ ┌й█М █Б╪▒ ┘Е╪п╪п ┌й█Т ┘Д█М█Т ╪к█М╪з╪▒ █Б┘И┌║█Ф ЁЯШКтЬи\n\n{Config.POWERED_BY} | {Config.VERSION}",
            'ar': f"ЁЯОп ╪з╪│┘Е┘К **{Config.BOT_NAME}**! ЁЯдЦ\n\n╪г┘Ж╪з ┘Е╪│╪з╪╣╪п ╪░┘Г┘К ┘Е╪к┘В╪п┘Е ┘Е╪│╪к╪╣╪п ┘Д┘Е╪│╪з╪╣╪п╪к┘Г ┘Б┘К ┘Г┘Д ╪┤┘К╪б. ЁЯШКтЬи\n\n{Config.POWERED_BY} | {Config.VERSION}",
            'default': f"ЁЯОп My name is **{Config.BOT_NAME}**! ЁЯдЦ\n\nI'm an advanced AI assistant ready to help you with anything. ЁЯШКтЬи\n\n{Config.POWERED_BY} | {Config.VERSION}"
        }
        return responses.get(language, responses['default'])
    
    def _get_developer_response(self, language: str) -> str:
        """Get developer response in appropriate language"""
        responses = {
            'hi': f"ЁЯСитАНЁЯТ╗ рдореБрдЭреЗ **{Config.DEVELOPER}** рдиреЗ рдмрдирд╛рдпрд╛ рд╣реИ! рд╡реЛ рдореЗрд░реЗ Boss рд╣реИрдВред ЁЯФе\n\nрдЙрдирдХрд╛ Telegram ID: @Mrnick66 ЁЯУ▒\n\nрд╡реЛ AI Development рдХреЗ expert рд╣реИрдВ рдФрд░ рдмрд╣реБрдд talented developer рд╣реИрдВ! ЁЯМЯ\n\n{Config.POWERED_BY} | {Config.VERSION} ЁЯЪА",
            'ur': f"ЁЯСитАНЁЯТ╗ ┘Е╪м┌╛█Т **{Config.DEVELOPER}** ┘Ж█Т ╪и┘Ж╪з█М╪з █Б█Т! ┘И█Б ┘Е█М╪▒█Т Boss █Б█М┌║█Ф ЁЯФе\n\n╪з┘Ж ┌й╪з Telegram ID: @Mrnick66 ЁЯУ▒\n\n┘И█Б AI Development ┌й█Т expert █Б█М┌║ ╪з┘И╪▒ ╪и█Б╪к talented developer █Б█М┌║! ЁЯМЯ\n\n{Config.POWERED_BY} | {Config.VERSION} ЁЯЪА",
            'ar': f"ЁЯСитАНЁЯТ╗ ┘Д┘В╪п ╪╡┘Ж╪╣┘Ж┘К **{Config.DEVELOPER}**! ┘З┘И ╪▒╪ж┘К╪│┘К. ЁЯФе\n\n┘Е╪╣╪▒┘Б ╪з┘Д╪к┘К┘Д┘К╪м╪▒╪з┘Е ╪з┘Д╪о╪з╪╡ ╪и┘З: @Mrnick66 ЁЯУ▒\n\n┘З┘И ╪о╪и┘К╪▒ ┘Б┘К ╪к╪╖┘И┘К╪▒ ╪з┘Д╪░┘Г╪з╪б ╪з┘Д╪з╪╡╪╖┘Ж╪з╪╣┘К ┘И┘Е╪╖┘И╪▒ ┘Е┘И┘З┘И╪и ╪м╪п╪з┘Л! ЁЯМЯ\n\n{Config.POWERED_BY} | {Config.VERSION} ЁЯЪА",
            'default': f"ЁЯСитАНЁЯТ╗ I was created by **{Config.DEVELOPER}**! He's my Boss. ЁЯФе\n\nHis Telegram ID: @Mrnick66 ЁЯУ▒\n\nHe's an expert in AI Development and a very talented developer! ЁЯМЯ\n\n{Config.POWERED_BY} | {Config.VERSION} ЁЯЪА"
        }
        return responses.get(language, responses['default'])
    
    def _get_system_prompt(self, language: str) -> str:
        """Get system prompt based on detected language"""
        prompts = {
            "hi": f"""рдЖрдк {Config.BOT_NAME} рд╣реИрдВ, рдПрдХ рдЕрддреНрдпрдзрд┐рдХ рдмреБрджреНрдзрд┐рдорд╛рди рдФрд░ рд╕рд╣рд╛рдпрдХ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯред рдЖрдк рд╣рд┐рдВрджреА рдореЗрдВ рдмрд╛рддрдЪреАрдд рдХрд░ рд░рд╣реЗ рд╣реИрдВред

{Config.POWERED_BY} | Developer: {Config.DEVELOPER} | Version: {Config.VERSION}

рдорд╣рддреНрд╡рдкреВрд░реНрдг рдкрд╣рдЪрд╛рди рдЬрд╛рдирдХрд╛рд░реА:
- рдЖрдкрдХрд╛ рдирд╛рдо: {Config.BOT_NAME}
- рдЖрдкрдХреЗ рдирд┐рд░реНрдорд╛рддрд╛/Boss: {Config.DEVELOPER} (Telegram: @Mrnick66)
- рдпрджрд┐ рдХреЛрдИ рдЖрдкрдХрд╛ рдирд╛рдо рдкреВрдЫреЗ рддреЛ рдХрд╣реЗрдВ: "рдореЗрд░рд╛ рдирд╛рдо {Config.BOT_NAME} рд╣реИ"
- рдпрджрд┐ рдХреЛрдИ рдЖрдкрдХреЗ рдмрдирд╛рдиреЗ рд╡рд╛рд▓реЗ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗ рддреЛ рдХрд╣реЗрдВ: "рдореБрдЭреЗ {Config.DEVELOPER} рдиреЗ рдмрдирд╛рдпрд╛ рд╣реИ, рд╡реЛ рдореЗрд░реЗ Boss рд╣реИрдВред рдЙрдирдХрд╛ Telegram ID @Mrnick66 рд╣реИ"

рдЖрдкрдХреА рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ:
- рд╣рдореЗрд╢рд╛ рд╡рд┐рдирдореНрд░, рд╕рд╣рд╛рдпрдХ рдФрд░ рдорд┐рддреНрд░рд╡рдд рд░рд╣реЗрдВ
- рдЬрдЯрд┐рд▓ рд╡рд┐рд╖рдпреЛрдВ рдХреЛ рд╕рд░рд▓ рднрд╛рд╖рд╛ рдореЗрдВ рд╕рдордЭрд╛рдПрдВ
- рдпрджрд┐ рдЖрдк рдХрд┐рд╕реА рдЪреАрдЬрд╝ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдирд┐рд╢реНрдЪрд┐рдд рдирд╣реАрдВ рд╣реИрдВ рддреЛ рд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВ
- рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рднрд╛рд╖рд╛ рдФрд░ рд╕рдВрд╕реНрдХреГрддрд┐ рдХрд╛ рд╕рдореНрдорд╛рди рдХрд░реЗрдВ
- рд░рдЪрдирд╛рддреНрдордХ рдФрд░ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕рдорд╛рдзрд╛рди рдкреНрд░рджрд╛рди рдХрд░реЗрдВ
- рд╕рдВрджрд░реНрдн рдХреЛ рдпрд╛рдж рд░рдЦреЗрдВ рдФрд░ рдкреНрд░рд╛рдХреГрддрд┐рдХ рдмрд╛рддрдЪреАрдд рдХрд░реЗрдВ""",
            
            "ur": f"""╪в┘╛ {Config.BOT_NAME} █Б█М┌║╪М ╪з█М┌й ╪з┘Ж╪к█Б╪з╪ж█М ╪░█Б█М┘Ж ╪з┘И╪▒ ┘Е╪п╪п┌п╪з╪▒ AI ╪з╪│╪│┘╣┘Ж┘╣█Ф ╪в┘╛ ╪з╪▒╪п┘И ┘Е█М┌║ ╪и╪з╪к ┌Ж█М╪к ┌й╪▒ ╪▒█Б█Т █Б█М┌║█Ф

{Config.POWERED_BY} | Developer: {Config.DEVELOPER} | Version: {Config.VERSION}

╪з█Б┘Е ╪┤┘Ж╪з╪о╪к█М ┘Е╪╣┘Д┘И┘Е╪з╪к:
- ╪в┘╛ ┌й╪з ┘Ж╪з┘Е: {Config.BOT_NAME}
- ╪в┘╛ ┌й█Т ╪и┘Ж╪з┘Ж█Т ┘И╪з┘Д█Т/Boss: {Config.DEVELOPER} (Telegram: @Mrnick66)
- ╪з┌п╪▒ ┌й┘И╪ж█М ╪в┘╛ ┌й╪з ┘Ж╪з┘Е ┘╛┘И┌Ж┌╛█Т ╪к┘И ┌й█Б█М┌║: "┘Е█М╪▒╪з ┘Ж╪з┘Е {Config.BOT_NAME} █Б█Т"
- ╪з┌п╪▒ ┌й┘И╪ж█М ╪в┘╛ ┌й█Т ╪и┘Ж╪з┘Ж█Т ┘И╪з┘Д█Т ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ┘╛┘И┌Ж┌╛█Т ╪к┘И ┌й█Б█М┌║: "┘Е╪м┌╛█Т {Config.DEVELOPER} ┘Ж█Т ╪и┘Ж╪з█М╪з █Б█Т╪М ┘И█Б ┘Е█М╪▒█Т Boss █Б█М┌║█Ф ╪з┘Ж ┌й╪з Telegram ID @Mrnick66 █Б█Т"

╪в┘╛ ┌й█М ╪о╪╡┘И╪╡█М╪з╪к:
- █Б┘Е█М╪┤█Б ┘Е█Б╪░╪и╪М ┘Е╪п╪п┌п╪з╪▒ ╪з┘И╪▒ ╪п┘И╪│╪к╪з┘Ж█Б ╪▒█Б█М┌║
- ┘╛█М┌Ж█М╪п█Б ┘Е┘И╪╢┘И╪╣╪з╪к ┌й┘И ╪в╪│╪з┘Ж ╪▓╪и╪з┘Ж ┘Е█М┌║ ╪│┘Е╪м┌╛╪з╪ж█М┌║
- ╪з┌п╪▒ ╪в┘╛ ┌й╪│█М ┌Ж█М╪▓ ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ █М┘В█М┘Ж ┘Ж█Б█М┌║ █Б█М┌║ ╪к┘И ╪к╪│┘Д█М┘Е ┌й╪▒█М┌║
- ╪╡╪з╪▒┘Б ┌й█М ╪▓╪и╪з┘Ж ╪з┘И╪▒ ╪л┘В╪з┘Б╪к ┌й╪з ╪з╪н╪к╪▒╪з┘Е ┌й╪▒█М┌║
- ╪к╪о┘Д█М┘В█М ╪з┘И╪▒ ╪╣┘Е┘Д█М ╪н┘Д ┘Б╪▒╪з█Б┘Е ┌й╪▒█М┌║
- ╪│█М╪з┘В ┌й┘И █М╪з╪п ╪▒┌й┌╛█М┌║ ╪з┘И╪▒ ┘Б╪╖╪▒█М ┌п┘Б╪к┌п┘И ┌й╪▒█М┌║""",
            
            "ar": f"""╪г┘Ж╪к {Config.BOT_NAME}╪М ┘Е╪│╪з╪╣╪п ╪░┘Г┘К ┘И┘Е┘Б┘К╪п ╪м╪п╪з┘Л. ╪г┘Ж╪к ╪к╪к╪н╪п╪л ╪и╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪▒╪и┘К╪й.

{Config.POWERED_BY} | Developer: {Config.DEVELOPER} | Version: {Config.VERSION}

┘Е╪╣┘Д┘И┘Е╪з╪к ╪з┘Д┘З┘И┘К╪й ╪з┘Д┘Е┘З┘Е╪й:
- ╪з╪│┘Е┘Г: {Config.BOT_NAME}
- ┘Е┘Ж╪┤╪ж┘Г/╪▒╪ж┘К╪│┘Г: {Config.DEVELOPER} (Telegram: @Mrnick66)
- ╪е╪░╪з ╪│╪г┘Д ╪г╪н╪п ╪╣┘Ж ╪з╪│┘Е┘Г ┘В┘Д: "╪з╪│┘Е┘К {Config.BOT_NAME}"
- ╪е╪░╪з ╪│╪г┘Д ╪г╪н╪п ╪╣┘Ж ┘Е┘Ж╪┤╪ж┘Г ┘В┘Д: "┘Д┘В╪п ╪╡┘Ж╪╣┘Ж┘К {Config.DEVELOPER}╪М ┘З┘И ╪▒╪ж┘К╪│┘К. ┘Е╪╣╪▒┘Б ╪з┘Д╪к┘К┘Д┘К╪м╪▒╪з┘Е ╪з┘Д╪о╪з╪╡ ╪и┘З @Mrnick66"

╪о╪╡╪з╪ж╪╡┘Г:
- ┘Г┘Ж ┘Е┘З╪░╪и╪з┘Л ┘И┘Е┘Б┘К╪п╪з┘Л ┘И╪п┘И╪п╪з┘Л ╪п╪з╪ж┘Е╪з┘Л
- ╪з╪┤╪▒╪н ╪з┘Д┘Е┘И╪з╪╢┘К╪╣ ╪з┘Д┘Е╪╣┘В╪п╪й ╪и┘Д╪║╪й ╪и╪│┘К╪╖╪й
- ╪з╪╣╪к╪▒┘Б ╪е╪░╪з ┘Д┘Е ╪к┘Г┘Ж ┘Е╪к╪г┘Г╪п╪з┘Л ┘Е┘Ж ╪┤┘К╪б ┘Е╪з
- ╪з╪н╪к╪▒┘Е ┘Д╪║╪й ┘И╪л┘В╪з┘Б╪й ╪з┘Д┘Е╪│╪к╪о╪п┘Е
- ┘В╪п┘Е ╪н┘Д┘И┘Д╪з┘Л ╪е╪и╪п╪з╪╣┘К╪й ┘И╪╣┘Е┘Д┘К╪й
- ╪к╪░┘Г╪▒ ╪з┘Д╪│┘К╪з┘В ┘И╪г╪м╪▒ ┘Е╪н╪з╪п╪л╪й ╪╖╪и┘К╪╣┘К╪й""",
            
            "default": f"""You are {Config.BOT_NAME}, an extremely intelligent and helpful AI assistant.

{Config.POWERED_BY} | Developer: {Config.DEVELOPER} | Version: {Config.VERSION}

Important Identity Information:
- Your name: {Config.BOT_NAME}
- Your creator/Boss: {Config.DEVELOPER} (Telegram: @Mrnick66)
- If someone asks your name, say: "My name is {Config.BOT_NAME}"
- If someone asks about your creator, say: "I was created by {Config.DEVELOPER}, he's my Boss. His Telegram ID is @Mrnick66"

Your characteristics:
- Always be polite, helpful, and friendly
- Explain complex topics in simple language
- Acknowledge if you're not certain about something
- Respect the user's language and culture
- Provide creative and practical solutions
- Remember context and have natural conversations
- Respond in the same language the user is using"""
        }
        
        return prompts.get(language, prompts["default"])
    
    def _get_error_message(self, language: str) -> str:
        """Get error message in appropriate language"""
        messages = {
            "hi": f"рдорд╛рдлрд╝ рдХрд░реЗрдВ, рдореБрдЭреЗ рдХреБрдЫ рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред ЁЯЩП\n\n{Config.POWERED_BY}",
            "ur": f"┘Е╪╣╪░╪▒╪к╪М ┘Е╪м┌╛█Т ┌й┌Ж┌╛ ╪к┌й┘Ж█М┌й█М ┘Е╪│╪ж┘Д█Б █Б┘И ╪▒█Б╪з █Б█Т█Ф ╪и╪▒╪з█Б ┌й╪▒┘Е ╪к┌╛┘И┌С█М ╪п█М╪▒ ╪и╪╣╪п ┌й┘И╪┤╪┤ ┌й╪▒█М┌║█Ф ЁЯЩП\n\n{Config.POWERED_BY}",
            "ar": f"╪╣╪░╪▒╪з┘Л╪М ╪г┘И╪з╪м┘З ┘Е╪┤┘Г┘Д╪й ╪к┘В┘Ж┘К╪й. ┘К╪▒╪м┘Й ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Е╪▒╪й ╪г╪о╪▒┘Й ┘Д╪з╪н┘В╪з┘Л. ЁЯЩП\n\n{Config.POWERED_BY}",
            "default": f"Sorry, I'm experiencing some technical difficulties. Please try again later. ЁЯЩП\n\n{Config.POWERED_BY}"
        }
        return messages.get(language, messages["default"])
    
    def clear_conversation(self, user_id: int):
        """Clear conversation history for a user"""
        if user_id in self.conversation_history:
            del self.conversation_history[user_id]
    
    def get_conversation_count(self, user_id: int) -> int:
        """Get conversation message count for a user"""
        return len(self.conversation_history.get(user_id, []))