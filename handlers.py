# handlers.py
# Developer: G A RAZA
# Command, message, and callback handlers for the Telegram bot with image integration, typing animation, and pink glass buttons

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ChatAction
from telegram.ext import ContextTypes
from ai_integration import humanize_text, generate_seo_article, check_grammar, assist_writing
from utilities import detect_language, generate_pdf, log_interaction
import asyncio
import requests

# Image URL for visual enhancement
IMAGE_URL = "https://graph.org/file/ff596066ce32ae4a5e635-1a9f69e38ad3c19549.jpg"

async def send_image(update: Update):
    """Send the specified image if accessible, with fallback."""
    try:
        # Verify image URL
        response = requests.head(IMAGE_URL, timeout=5)
        if response.status_code == 200:
            await update.message.chat.send_photo(photo=IMAGE_URL)
        else:
            await update.message.reply_text("Image unavailable, proceeding without it. ЁЯТЧ")
    except Exception as e:
        await update.message.reply_text("Image unavailable, proceeding without it. ЁЯТЧ")

async def show_typing(update: Update):
    """Show typing animation before responding."""
    await update.message.chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(1)  # Simulate typing delay

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command."""
    await show_typing(update)
    user_id = update.effective_user.id
    lang = detect_language(update.message.text or "Hello")
    await send_image(update)
    keyboard = [
        ["/menu", "/help"],
        ["/humanize", "/seoarticle"],
        ["/grammar", "/assist"],
        ["/download"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    if lang == "hi":
        message = (
            "рдЬреА рдП рд░рд╛рдЬрд╛ рджреНрд╡рд╛рд░рд╛ рдмрдирд╛рдП рдЧрдП AI-рдкрд╛рд╡рд░реНрдб рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯдЦ\n"
            "рдХрдорд╛рдВрдбреНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд╕реБрд╡рд┐рдзрд╛рдУрдВ рддрдХ рдкрд╣реБрдВрдЪреЗрдВ:\n"
            "- /humanize: рдЯреЗрдХреНрд╕реНрдЯ рдХреЛ рдорд╛рдирд╡ рдЬреИрд╕рд╛ рдмрдирд╛рдПрдВ\n"
            "- /seoarticle: SEO-рдЕрдиреБрдХреВрд▓рд┐рдд рд▓реЗрдЦ рдмрдирд╛рдПрдВ\n"
            "- /grammar: рд╡реНрдпрд╛рдХрд░рдг рдЬрд╛рдВрдЪреЗрдВ\n"
            "- /assist: рд▓реЗрдЦрди рд╕реБрдЭрд╛рд╡ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\n"
            "- /menu: рдЗрдВрдЯрд░реИрдХреНрдЯрд┐рд╡ рдореЗрдиреВ рджреЗрдЦреЗрдВ\n"
            "- /download: PDF рдХреЗ рд░реВрдк рдореЗрдВ рд╕рд╛рдордЧреНрд░реА рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ\n"
            "- /help: рдпрд╣ рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдПрдВ"
        )
    else:
        message = (
            "Welcome to the AI-Powered Bot by G A RAZA! ЁЯдЦ\n"
            "Use commands to access features:\n"
            "- /humanize: Make text human-like\n"
            "- /seoarticle: Generate SEO-optimized articles\n"
            "- /grammar: Check grammar\n"
            "- /assist: Get writing suggestions\n"
            "- /menu: View interactive menu\n"
            "- /download: Download content as PDF\n"
            "- /help: Show this message"
        )
    await update.message.reply_text(message, reply_markup=reply_markup)
    log_interaction(user_id, "/start", "Started bot")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /help command."""
    await show_typing(update)
    user_id = update.effective_user.id
    lang = detect_language(update.message.text or "Hello")
    await send_image(update)
    if lang == "hi":
        message = (
            "AI-рдкрд╛рд╡рд░реНрдб рдмреЙрдЯ | рдбреЗрд╡рд▓рдкрд░: рдЬреА рдП рд░рд╛рдЬрд╛\n\n"
            "рдЙрдкрд▓рдмреНрдз рдХрдорд╛рдВрдбреНрд╕:\n"
            "/humanize - рдЯреЗрдХреНрд╕реНрдЯ рдХреЛ рдорд╛рдирд╡ рдЬреИрд╕рд╛ рдмрдирд╛рдПрдВ\n"
            "/seoarticle - SEO-рдЕрдиреБрдХреВрд▓рд┐рдд рд▓реЗрдЦ рдмрдирд╛рдПрдВ\n"
            "/grammar - рдЯреЗрдХреНрд╕реНрдЯ рдореЗрдВ рд╡реНрдпрд╛рдХрд░рдг рдЬрд╛рдВрдЪреЗрдВ\n"
            "/assist - рд▓реЗрдЦрди рдореЗрдВ рд╕реБрдзрд╛рд░ рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рд╡\n"
            "/menu - рдЗрдВрдЯрд░реИрдХреНрдЯрд┐рд╡ рдореЗрдиреВ\n"
            "/download - рд╕рд╛рдордЧреНрд░реА рдХреЛ PDF рдХреЗ рд░реВрдк рдореЗрдВ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ\n"
            "/help - рдпрд╣ рд╕рд╣рд╛рдпрддрд╛ рд╕рдВрджреЗрд╢"
        )
    else:
        message = (
            "AI-Powered Bot | Developer: G A RAZA\n\n"
            "Available commands:\n"
            "/humanize - Humanize AI-generated text\n"
            "/seoarticle - Generate an SEO-optimized article\n"
            "/grammar - Check grammar in your text\n"
            "/assist - Get writing suggestions\n"
            "/menu - Interactive menu\n"
            "/download - Download content as PDF\n"
            "/help - Show this help message"
        )
    await update.message.reply_text(message)
    log_interaction(user_id, "/help", "Help requested")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /menu command with pink glass buttons."""
    await show_typing(update)
    user_id = update.effective_user.id
    lang = detect_language(update.message.text or "Hello")
    await send_image(update)
    keyboard = [
        [InlineKeyboardButton("тЬиЁЯТЧ Humanize Text" if lang == "en" else "тЬиЁЯТЧ рдЯреЗрдХреНрд╕реНрдЯ рдорд╛рдирд╡рдХреГрдд рдХрд░реЗрдВ", callback_data="humanize")],
        [InlineKeyboardButton("тЬиЁЯТЧ SEO Article" if lang == "en" else "тЬиЁЯТЧ SEO рд▓реЗрдЦ", callback_data="seoarticle")],
        [InlineKeyboardButton("тЬиЁЯТЧ Grammar Check" if lang == "en" else "тЬиЁЯТЧ рд╡реНрдпрд╛рдХрд░рдг рдЬрд╛рдВрдЪ", callback_data="grammar")],
        [InlineKeyboardButton("тЬиЁЯТЧ Writing Assistant" if lang == "en" else "тЬиЁЯТЧ рд▓реЗрдЦрди рд╕рд╣рд╛рдпрдХ", callback_data="assist")],
        [InlineKeyboardButton("тЬиЁЯТЧ Download PDF" if lang == "en" else "тЬиЁЯТЧ PDF рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ", callback_data="download")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = "Select a feature: ЁЯТЧ" if lang == "en" else "рдПрдХ рд╕реБрд╡рд┐рдзрд╛ рдЪреБрдиреЗрдВ: ЁЯТЧ"
    await update.message.reply_text(message, reply_markup=reply_markup)
    log_interaction(user_id, "/menu", message)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle inline button clicks."""
    query = update.callback_query
    await query.answer()
    await query.message.chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(1)
    lang = detect_language(query.data or "Hello")
    command = query.data
    if command in ["humanize", "seoarticle", "grammar", "assist", "download"]:
        message = {
            "humanize": "Please provide text to humanize. ЁЯТЧ" if lang == "en" else "рдХреГрдкрдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдЬрд┐рд╕реЗ рдорд╛рдирд╡рдХреГрдд рдХрд░рдирд╛ рд╣реИред ЁЯТЧ",
            "seoarticle": "Please provide a topic and keywords. ЁЯТЧ" if lang == "en" else "рдХреГрдкрдпрд╛ рд╡рд┐рд╖рдп рдФрд░ рдХреАрд╡рд░реНрдб рдкреНрд░рджрд╛рди рдХрд░реЗрдВред ЁЯТЧ",
            "grammar": "Please provide text to check grammar. ЁЯТЧ" if lang == "en" else "рдХреГрдкрдпрд╛ рд╡реНрдпрд╛рдХрд░рдг рдЬрд╛рдВрдЪ рдХреЗ рд▓рд┐рдП рдЯреЗрдХреНрд╕реНрдЯ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред ЁЯТЧ",
            "assist": "Please provide text for writing assistance. ЁЯТЧ" if lang == "en" else "рдХреГрдкрдпрд╛ рд▓реЗрдЦрди рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдЯреЗрдХреНрд╕реНрдЯ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред ЁЯТЧ",
            "download": "Please provide text to download as PDF. ЁЯТЧ" if lang == "en" else "рдХреГрдкрдпрд╛ PDF рдХреЗ рд░реВрдк рдореЗрдВ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЯреЗрдХреНрд╕реНрдЯ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред ЁЯТЧ"
        }[command]
        context.user_data["last_command"] = command
        await query.message.reply_text(message)
    log_interaction(update.effective_user.id, f"button_{command}", "Button clicked")

async def humanize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /humanize command or text messages."""
    await show_typing(update)
    user_id = update.effective_user.id
    text = ' '.join(context.args) if context.args else update.message.text
    lang = detect_language(text or "Hello")
    if not text.startswith('/'):
        await send_image(update)
    if not text or text.startswith('/'):
        message = "Please provide text to humanize. Example: /humanize Your text here ЁЯТЧ" if lang == "en" else "рдХреГрдкрдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдЬрд┐рд╕реЗ рдорд╛рдирд╡рдХреГрдд рдХрд░рдирд╛ рд╣реИред рдЙрджрд╛рд╣рд░рдг: /humanize_рдЖрдкрдХрд╛_рдЯреЗрдХреНрд╕реНрдЯ_рдпрд╣рд╛рдБ ЁЯТЧ"
        await update.message.reply_text(message)
        return
    humanized_text = humanize_text(text, lang)
    await update.message.reply_text(f"{'Humanized Text' if lang == 'en' else 'рдорд╛рдирд╡рдХреГрдд рдЯреЗрдХреНрд╕реНрдЯ'}:\n{humanized_text} ЁЯТЧЁЯТЧ")
    context.user_data["last_output"] = humanized_text
    log_interaction(user_id, "/humanize", text)

async def seo_article(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /seoarticle command."""
    await show_typing(update)
    user_id = update.effective_user.id
    text = ' '.join(context.args)
    lang = detect_language(text or "Hello")
    await send_image(update)
    if not text:
        message = "Please provide a topic and keywords. Example: /seoarticle Topic: AI Bots Keywords: AI, chatbot ЁЯТЧ" if lang == "en" else "рдХреГрдкрдпрд╛ рд╡рд┐рд╖рдп рдФрд░ рдХреАрд╡рд░реНрдб рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рдЙрджрд╛рд╣рд░рдг: /seoarticle_рд╡рд┐рд╖рдп: AI_рдмреЙрдЯреНрд╕_рдХреАрд╡рд░реНрдб:_AI,_рдЪреИрдЯрдмреЙрдЯ ЁЯТЧ"
        await update.message.reply_text(message)
        return
    article = generate_seo_article(text, lang)
    await update.message.reply_text(f"{'SEO-Optimized Article' if lang == 'en' else 'SEO рдЕрдиреБрдХреВрд▓рд┐рдд рд▓реЗрдЦ'}:\n{article} ЁЯТЧЁЯТЧ")
    context.user_data["last_output"] = article
    log_interaction(user_id, "/seoarticle", text)

async def grammar_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /grammar command."""
    await show_typing(update)
    user_id = update.effective_user.id
    text = ' '.join(context.args)
    lang = detect_language(text or "Hello")
    await send_image(update)
    if not text:
        message = "Please provide text to check grammar. Example: /grammar Your text here ЁЯТЧ" if lang == "en" else "рдХреГрдкрдпрд╛ рд╡реНрдпрд╛рдХрд░рдг рдЬрд╛рдВрдЪ рдХреЗ рд▓рд┐рдП рдЯреЗрдХреНрд╕реНрдЯ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рдЙрджрд╛рд╣рд░рдг: /grammar_рдЖрдкрдХрд╛_рдЯреЗрдХреНрд╕реНрдЯ_рдпрд╣рд╛рдБ ЁЯТЧ"
        await update.message.reply_text(message)
        return
    corrections = check_grammar(text)
    await update.message.reply_text(f"{'Grammar Check' if lang == 'en' else 'рд╡реНрдпрд╛рдХрд░рдг рдЬрд╛рдВрдЪ'}:\n{corrections} ЁЯТЧЁЯТЧ")
    context.user_data["last_output"] = corrections
    log_interaction(user_id, "/grammar", text)

async def writing_assist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /assist command."""
    await show_typing(update)
    user_id = update.effective_user.id
    text = ' '.join(context.args)
    lang = detect_language(text or "Hello")
    await send_image(update)
    if not text:
        message = "Please provide text for writing assistance. Example: /assist Your text here ЁЯТЧ" if lang == "en" else "рдХреГрдкрдпрд╛ рд▓реЗрдЦрди рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдЯреЗрдХреНрд╕реНрдЯ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рдЙрджрд╛рд╣рд░рдг: /assist_рдЖрдкрдХрд╛_рдЯреЗрдХреНрд╕реНрдЯ_рдпрд╣рд╛рдБ ЁЯТЧ"
        await update.message.reply_text(message)
        return
    suggestions = assist_writing(text, lang)
    await update.message.reply_text(f"{'Writing Suggestions' if lang == 'en' else 'рд▓реЗрдЦрди рд╕реБрдЭрд╛рд╡'}:\n{suggestions} ЁЯТЧЁЯТЧ")
    context.user_data["last_output"] = suggestions
    log_interaction(user_id, "/assist", text)

async def download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /download command."""
    await show_typing(update)
    user_id = update.effective_user.id
    lang = detect_language(update.message.text or "Hello")
    await send_image(update)
    if "last_output" not in context.user_data:
        message = "No content available to download. Please use a command like /humanize or /seoarticle first. ЁЯТЧ" if lang == "en" else "рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╕рд╛рдордЧреНрд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ /humanize рдпрд╛ /seoarticle рдЬреИрд╕реЗ рдХрдорд╛рдВрдб рдХрд░реЗрдВред ЁЯТЧ"
        await update.message.reply_text(message)
        return
    content = context.user_data["last_output"]
    pdf_path = generate_pdf(content, lang)
    with open(pdf_path, "rb") as f:
        await update.message.reply_document(document=f, filename="output.pdf")
    message = "PDF downloaded successfully! ЁЯТЧЁЯТЧ" if lang == "en" else "PDF рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдбрд╛рдЙрдирд▓реЛрдб рд╣реЛ рдЧрдпрд╛! ЁЯТЧЁЯТЧ"
    await update.message.reply_text(message)
    log_interaction(user_id, "/download", "PDF downloaded")
